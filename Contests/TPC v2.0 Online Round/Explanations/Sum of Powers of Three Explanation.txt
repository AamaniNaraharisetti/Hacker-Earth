Let us write N in base 3.

For example, 30 = 27 + 3 so it is 1010

20 = 18 + 2 = 0202

We will first check if K is < than the total sum of all bits.

Then, the answer is no. Because we can not reduce the number of bits.

-----

However, we can increase the number of powers of 3.

3^{K + 1} = 3^{k} + 3^{k} + 3^{k}

We can use this operation and increase the number of summands by 2 at 1 step

-----

The number of summands always increases by 2 at each step

Whenever we replace (3^{k + 1} by 3 3^{k}), the number of summands increases by 2

-----

Also, we can have at most N occurences of 1

So, K has to be <= N

-----

#include <iostream>
#include <vector>
#include <map>

using namespace std;

const long long oo = 1e18;
vector <long long> powers;

void precompute()
{
    powers.push_back(1);

    while(powers.back() < oo/3)
    {
        powers.push_back(powers.back()*3);
    }
}

void solve()
{
    long long n, no_of_tribits;
    cin >> n >> no_of_tribits;

    long long temp_n = n;
    int tribits = 0;

    for(int i = powers.size() - 1; i >= 0; i--)
    {
        while(temp_n >= powers[i])
        {
            temp_n -= powers[i];

            tribits++;
        }
    }

    if(tribits > no_of_tribits || no_of_tribits > n)
    {
        cout << "NO\n";

        return;
    }

    cout << (no_of_tribits%2 == tribits%2 ? "YES\n" : "NO\n");
}

int main()
{
    precompute();

    int no_of_test_cases;
    cin >> no_of_test_cases;

    while(no_of_test_cases--)
        solve();

    return 0;
}
