The length of the longest distinct subsequence is simply the number of distinct letters in the string. We will choose one of each and concatenate them.

Now, we must realise that in any distinct subsequence of this length, each of the distinct letters must appear exactly once. 

The number of ways of choosing alphabet x, is frequency[x] in the string. 

The number of distinct subsequences is the product of the frequencies of all the alphabets.

-----

void solve()
{
    string S;
    cin >> S;

    const int NO_OF_ALPHABETS = 26;
    vector <int> frequency(NO_OF_ALPHABETS, 0);
    for(int i = 0; i < S.size(); i++)
        frequency[S[i] - 'a']++;

    const int MOD = 1e9 + 7;
    long long no_of_subsequences = 1;

    for(int alpha = 0; alpha < NO_OF_ALPHABETS; alpha++)
        if(frequency[alpha] != 0)
            no_of_subsequences = (no_of_subsequences*frequency[alpha])%MOD;

    cout << no_of_subsequences << endl;
}
