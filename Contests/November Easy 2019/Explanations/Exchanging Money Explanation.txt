Suppose the gcd of the array is G. 

Then, we can reach N only if G is a multiple of N. 

Proof - 


A1.w1 + A2.w2 + ... + Ak.wk = N

Let g = gcd(A1, A2, ... , Ak)


g.A1'.w1 + g.A2'.w2 + ... + g.Ak'.wk = N

g(A1'.w1 + A2'.w2 + ... + Ak'.wk) = N

----

If N is not a multiple of g, then we cannot reach N. 

Bezout's Identity tells us that we can always reach N if g|N. 

---

#include <iostream>
#include <vector>
#include <algorithm>
 
#define all(v) (v).begin(), (v).end()
using namespace std;
 
int main()
{
    int no_of_elements, no_of_queries; 
    cin >> no_of_elements >> no_of_queries; 
    
    int array_gcd;
    for(int i = 1; i <= no_of_elements; i++)
    {
        int x;
        cin >> x;
        array_gcd = (i == 1 ? x : __gcd(array_gcd, x));
    }
    
    for(int i = 1; i <= no_of_queries; i++)
    {
        int P;
        cin >> P;
        cout << (P%array_gcd == 0 ? "YES\n" : "NO\n");
    }
    
    return 0;
}
