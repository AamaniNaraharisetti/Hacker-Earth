Let us see the cost of making the entire array equal to X.

Each element will either be reduced to 0 or made to be equal to x.

Sum(Min{A[i], abs(X - A[i])})

--------

We notice that it is always better to make the final element some element from the array. 

------

We will check if the last element is each element from the array. 

-------

long long moves_if_equal_to(vector <int> &A, int x)
{
    long long moves = 0;

    for(int i = 0; i < A.size(); i++)
    {
        long long moves_here = min(A[i], abs(x - A[i]));

        moves += moves_here;
    }

    return moves;
}

int main()
{
    int n;
    cin >> n;

    vector <int> A(n);
    for(int i = 0; i < n; i++)
        cin >> A[i];

    const long long oo = 1e15;
    long long minimum_moves = oo;
    for(int i = 0; i < n; i++)
        minimum_moves = min(minimum_moves, moves_if_equal_to(A, A[i]));

    cout << minimum_moves;
    return 0;
}
